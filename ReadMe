第一次创建github：地址：https://github.com/chengfuyong/Android 
第一次托代码： git clone https://github.com/chengfuyong/Android Android

GitHub详细教程

Table of Contents
1 Git详细教程
1.1 Git简介
1.1.1 Git是何方神圣?
1.1.2 重要的术语
1.1.3 索引
1.2 Git安装
1.3 Git配置
1.3.1 用户信息
1.3.2 高亮显示
1.3.3 忽略特定的文件
1.3.4 使用.gitkeep来追踪空的文件夹
1.4 开始操作Git
1.4.1 创建内容
1.4.2 创建仓库、添加文件和提交更改
1.4.3 diff命令与commit更改
1.4.4 Status, Diff 和 Commit Log
1.4.5 更正提交的信息 - git amend
1.4.6 删除文件
1.5 远端仓库（remote repositories）
1.5.1 设置一个远端的Git仓库
1.5.2 推送更改到其他的仓库
1.5.3 添加远端仓库
1.5.4 显示已有的远端仓库
1.5.5 克隆仓库
1.5.6 拉取（Pull）更改
1.5.7 还原更改
1.5.8 标记
1.6 分支、合并
1.6.1 分支
1.6.2 合并
1.6.3 删除分支
1.6.4 推送（push）一个分支到远端仓库
1.7 解决合并冲突
1.8 变基（Rebase）
1.8.1 在同一分支中应用Rebase Commit
1.8.2 Rebasing多个分支
1.8.3 Rebase最佳实践
1.8.4 创建和应用补丁
1.9 定义同名命令
1.10 放弃跟踪文件
1.11 其他有用的命令
1.12 安装Git服务
1.13 在线的远端仓库
1.13.1 克隆远端仓库
1.13.2 添加远端仓库
1.13.3 通过http和代理服务器进行远端操作
1.14 Git服务提供商
1.14.1 GitHub
1.14.2 Bitbucket
1.15 Git的图形接口
1.16 Kindle版本教程
1.17 问题与讨论
1.18 链接和文章

1 Git详细教程

1.1 Git简介

1.1.1 Git是何方神圣?

Git是用C语言开发的分布版本控制系统。版本控制系统可以保留一个文件集合的历史记录，并能回滚文件集合到另一个状态（历史记录状态）。另一个状态可以是不同的文件，也可以是不同的文件内容。举个例子，你可以将文件集合转换到两天之前的状态，或者你可以在生产代码和实验性质的代码之间进行切换。文件集合往往被称作是“源代码”。在一个分布版本控制系统中，每个人都有一份完整的源代码（包括源代码所有的历史记录信息），而且可以对这个本地的数据进行操作。分布版本控制系统不需要一个集中式的代码仓库。

当你对本地的源代码进行了修改，你可以标注他们跟下一个版本相关（将他们加到index中），然后提交到仓库中来（commit）。Git保存了所有的版本信息，所以你可以转换你的源代码到任何的历史版本。你可以对本地的仓库进行代码的提交，然后与其他的仓库进行同步。你可以使用Git来进行仓库的克隆（clone）操作，完整的复制一个已有的仓库。仓库的所有者可以通过push操作（推送变更到别处的仓库）或者Pull操作（从别处的仓库拉取变更）来同步变更。

Git支持分支功能（branch）。如果你想开发一个新的产品功能，你可以建立一个分支，对这个分支的进行修改，而不至于会影响到主支上的代码。

Git提供了命令行工具；这个教程会使用命令行。你也可以找到图形工具，譬如与Eclipse配套的EGit工具，但是这些都不会在这个教程中进行描述。

1.1.2 重要的术语

Git 术语
术语	定义
仓库	一个仓库包括了所有的版本信息、所有的分支和标记信息.
Repository	在Git中仓库的每份拷贝都是完整的。仓库让你可以从中
 	取得你的工作副本。
 	一个分支意味着一个独立的、拥有自己历史信息的代码线
分支	（code line）。你可以从已有的代码中生成一个新的分支
Branches	，这个分支与剩余的分支完全独立。默认的分支往往是叫
 	master。用户可以选择一个分支，选择一个分支叫做
 	checkout.
标记	一个标记指的是某个分支某个特定时间点的状态。通过标
Tags	记，可以很方便的切换到标记时的状态，例如2009年1月25
 	号在testing分支上的代码状态
提交	提交代码后，仓库会创建一个新的版本。这个版本可以在
Commit	后续被重新获得。每次提交都包括作者和提交者，作者和
 	提交者可以是不同的人
URL	URl用来标识一个仓库的位置
 	用来表示代码的一个版本状态。Git通过用SHA1 hash算法
修订	表示的id来标识不同的版本。每一个 SHA1 id都是160位长
Revision	,16进制标识的字符串.最新的版本可以通过HEAD来获取.
 	之前的版本可以通过"HEAD~1"来获取，以此类推。

1.1.3 索引

Git 需要将代码的变化显示的与下一次提交进行关联。举个例子，如果你对一个文件继续了修改，然后想将这些修改提交到下一次提交中，你必须将这个文件提交到索引中，通过git add file命令。这样索引可以保存所有变化的快照。

新增的文件总是要显示的添加到索引中来。对于那些之前已经提交过的文件，可以在commit命令中使用-a 选项达到提交到索引的目的。

1.2 Git安装

在Ubuntu上，你可以通过apt来安装git命令行工具

sudo apt-get install git-core

对于其他的Linux版本，请查看相关的软件包安装工具使用方法。msysgit项目提供了Windows版本的Git，地址是http://code.google.com/p/msysgit/

